#!/bin/bash
###############################################################
#                Unofficial 'Bash strict mode'                #
# http://redsymbol.net/articles/unofficial-bash-strict-mode/  #
###############################################################
set -euo pipefail
IFS=$'\n\t'
###############################################################

PACKAGE_CONFIG_DIR="/etc/default/rpi-wifi-ap"
AP_MODE_CONFIG_FILE="${PACKAGE_CONFIG_DIR}/defaults.conf"
HOSTAPD_BASE_CONF="${PACKAGE_CONFIG_DIR}/hostapd_base.conf"
UDEV_RULES_FILE="/etc/udev/rules.d/70-persistent-net.rules"

usage_and_exit() {
	echo "Application that sets up a Raspberry Pi as a wireless access point."
	echo "Customize the access point settings by editing ${AP_MODE_CONFIG_FILE}"
	echo ""
	echo -e "Usage:\\n\\t${0} {start,stop,status}"
	echo "where:"
	echo -e "\\tstart\\t: use Raspberry Pi as wireless access point."
	echo -e "\\tstop\\t: stop access point mode and restore previous configuration."
	echo -e "\\tstatus\\t: display access point state and information."
	echo ""
	exit 1
}

restart_and_wait_for_service_state() {
	service_name="${1}"
	service_state="${2:-running}"
	echo "Restarting service ${service_name}..."
	systemctl restart "${service_name}"
	while [ "$(systemctl show -p ActiveState --value "${service_name}")" != "active" ] || [ "$(systemctl show -p SubState --value "${service_name}")" != "${service_state}" ]; do
		echo "Service ${service_name} isn't ready - sleeping for 2 seconds..."
		sleep 2
	done
}

unmask_service_if_necessary() {
	if [ "$(systemctl show -p LoadState --value "${1}")" == "masked" ]; then
		systemctl unmask "${1}"
	fi
}

clean_config_files() {
	hostapd_conf="/etc/hostapd/hostapd.conf"
	if [[ -f "${hostapd_conf}.orig" ]]; then
		echo "Restoring previous hostapd configuration from ${hostapd_conf}.orig"
		mv "${hostapd_conf}.orig" "${hostapd_conf}"
	fi

	echo "Restoring /etc/dhcpcd.conf"
	sed -i -z 's|interface '"${access_point_interface}"'\nstatic ip_address='"${interface_ip}"'/24||p' /etc/dhcpcd.conf

	echo "Restoring /etc/default/isc-dhcp-server"
	sed -i 's|INTERFACESv4="ptusb0 '"${access_point_interface}"'"|INTERFACESv4="ptusb0"|' /etc/default/isc-dhcp-server
	sed -i 's|INTERFACESv4="'"${access_point_interface}"'"|INTERFACESv4=""|' /etc/default/isc-dhcp-server
}

patch_config_files() {
	hostapd_conf="/etc/hostapd/hostapd.conf"
	if [[ -f "${hostapd_conf}" ]]; then
		echo "Backing up existing ${hostapd_conf}..."
		cp "${hostapd_conf}" "${hostapd_conf}.orig"
	fi

	echo "Configuring hostapd ..."
	cp "${HOSTAPD_BASE_CONF}" /etc/hostapd/hostapd.conf
	echo "interface=${access_point_interface}
ssid=${ssid}
wpa_passphrase=${wpa_passphrase}" >>/etc/hostapd/hostapd.conf

	if ! grep -q "interface ${access_point_interface}
static ip_address=${interface_ip}/24" /etc/dhcpcd.conf; then
		echo "Setting static IP configuration in /etc/dhcpcd.conf ..."
		echo -e "interface ${access_point_interface}\\nstatic ip_address=${interface_ip}/24" >>/etc/dhcpcd.conf
	fi

	if ! grep -q "subnet ${subnet_ip} netmask ${subnet_mask} {" /etc/dhcp/dhcpd.conf; then
		echo "Setting subnet configuration in /etc/dhcp/dhcpd.conf ..."
		echo "subnet ${subnet_ip} netmask ${subnet_mask} {
    range ${static_ip_prefix}.${dhcp_start} ${static_ip_prefix}.${dhcp_end};
    option subnet-mask ${subnet_mask};
    option routers ${interface_ip};
    option domain-name-servers 8.8.8.8, 8.8.4.4;
    option time-offset 0;
    option broadcast-address ${static_ip_prefix}.255;
  }" >>/etc/dhcp/dhcpd.conf
	fi

	echo "Configuring ${access_point_interface} in /etc/default/isc-dhcp-server..."
	sed -i 's,INTERFACESv4="ptusb0",INTERFACESv4="ptusb0 '"${access_point_interface}"'",' /etc/default/isc-dhcp-server
	sed -i 's,INTERFACESv4="",INTERFACESv4="'"${access_point_interface}"'",' /etc/default/isc-dhcp-server
}

start_ap_mode() {
	echo "Starting Wifi: Access Point Mode ..."
	ifconfig "${access_point_interface}" "${interface_ip}" netmask "${subnet_mask}"
	ifconfig "${access_point_interface}" up
	if systemctl status pt-dhcp-server &>/dev/null; then
		restart_and_wait_for_service_state pt-dhcp-server exited
	else
		restart_and_wait_for_service_state isc-dhcp-server running
	fi
	unmask_service_if_necessary hostapd
	restart_and_wait_for_service_state hostapd running
	wpa_cli -i "${wifi_interface}" reconfigure
	echo "Started AP mode with SSID ${ssid}"
}

stop_ap_mode_if_active() {
	if systemctl status hostapd &>/dev/null; then
		echo "Stopping Wifi: Access Point Mode ..."
		systemctl stop hostapd
		echo "Stopped AP mode"
	fi
	wpa_cli -i "${wifi_interface}" reconfigure
}

start_wifi_managed_mode() {
	echo "Starting Wifi: Managed Mode ..."
	dhclient -r "${wifi_interface}"
	if systemctl status pt-dhcp-server &>/dev/null; then
		restart_and_wait_for_service_state pt-dhcp-server exited
	else
		systemctl stop isc-dhcp-server
	fi
	restart_and_wait_for_service_state dhcpcd running
	restart_and_wait_for_service_state wpa_supplicant running
}

stop_wifi_managed_mode() {
	echo "Stopping Wifi: Managed Mode ..."
	restart_and_wait_for_service_state dhcpcd running
	restart_and_wait_for_service_state wpa_supplicant running
}

get_hostapd_state() {
	state=$(systemctl show -p ActiveState --value hostapd)
	echo "${state}"
}

print_current_status() {
	state=$(get_hostapd_state)
	echo "State: ${state}"
	if [[ "${state}" == "active" ]]; then
		echo "SSID: ${ssid}"
		echo "Passphrase: ${wpa_passphrase}"
		echo "IP Address: ${interface_ip}"
	fi
}

reload_udev_rules() {
	udevadm control --reload-rules
	udevadm trigger
}

create_virtual_interface() {
	echo "Creating virtual interface ${wifi_interface} to run AP mode"
	cat >"${UDEV_RULES_FILE}" <<EOF
SUBSYSTEM=="ieee80211", ACTION=="add|change", ATTR{macaddress}=="${wifi_interface_mac}", KERNEL=="phy0", \
RUN+="/sbin/iw phy phy0 interface add ${access_point_interface} type __ap", \
RUN+="/bin/ip link set ${access_point_interface} address ${wifi_interface_mac}

EOF
	reload_udev_rules
}

remove_virtual_interface() {
	if [[ -f "${UDEV_RULES_FILE}" ]]; then
		echo "Removing virtual interface ${wifi_interface} to run AP mode"
		rm "${UDEV_RULES_FILE}"
	fi
	reload_udev_rules
	if iw dev | grep -q "${access_point_interface}"; then
		iw dev "${access_point_interface}" del
	fi
}

if [[ "$EUID" -ne 0 ]]; then
	echo "Please run as root"
	exit 1
fi

command=${1:-}
valid_commands=("start" "stop" "status")
if [[ -z "${command}" ]] || [[ ! "${valid_commands[*]}" =~ ${command} ]]; then
	# shellcheck disable=SC2145
	echo "Invalid argument: accepted values are: ${valid_commands[@]}."
	echo ""
	usage_and_exit
fi

# shellcheck disable=SC1090
source "${AP_MODE_CONFIG_FILE}"

access_point_interface="${access_point_interface:-ap0}"
wifi_interface="${wifi_interface:-wlan0}"
wifi_interface_mac="$(cat /sys/class/net/"${wifi_interface}"/address)"
static_ip_prefix="${static_ip_prefix:-192.168.90}"
interface_ip="${interface_ip:-${static_ip_prefix}.1}"
subnet_ip="${subnet_ip:-${static_ip_prefix}.0}"
subnet_mask="${subnet_mask:-255.255.255.0}"
dhcp_start="${dhcp_start:-${static_ip_prefix}.10}"
dhcp_end="${dhcp_end:-${static_ip_prefix}.50}"

ssid="${ssid:-${2}}"
wpa_passphrase="${wpa_passphrase:-${3}}"

if [[ -z "${ssid}" ]]; then
	echo "No SSID provided."
	echo ""
	usage_and_exit
fi

if [[ -z "${wpa_passphrase}" ]]; then
	echo "No passphrase provided."
	echo ""
	usage_and_exit
fi

if [[ "${command}" == "start" ]]; then
	stop_ap_mode_if_active
	create_virtual_interface
	patch_config_files
	stop_wifi_managed_mode
	start_ap_mode
	print_current_status
elif [[ "${command}" == "stop" ]]; then
	stop_ap_mode_if_active
	clean_config_files
	remove_virtual_interface
	start_wifi_managed_mode
elif [[ "${command}" == "status" ]]; then
	print_current_status
fi
