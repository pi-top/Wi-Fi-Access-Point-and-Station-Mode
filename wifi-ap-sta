#!/bin/bash
###############################################################
#                Unofficial 'Bash strict mode'                #
# http://redsymbol.net/articles/unofficial-bash-strict-mode/  #
###############################################################
set -euo pipefail
IFS=$'\n\t'
###############################################################

AP_MODE_CONFIG_FILE="/etc/default/wifi-ap-sta"

wifi_country() {
	local country
	country=$(wpa_cli -i "$WIFI_IFACE" get country 2>/dev/null)
	[ "${country}" = "FAIL" ] && country="00"
	echo "${country:-00}"
}

initialise_ap_ssid_and_password() {
	AP_SSID="${AP_SSID:-$(produce_ssid)}"
	AP_PASSWORD="${AP_PASSWORD:-$(produce_password)}"
}

initialise_ap_values() {
	ETH_IFACE="${ETH_IFACE:-eth0}"
	AP_IFACE="${AP_IFACE:-wlan_ap0}"
	AP_MAC="${AP_MAC:-99:88:77:66:55:44}"
	WIFI_IFACE="${WIFI_IFACE:-wlan0}"
	STATIC_IP_PREFIX="${STATIC_IP_PREFIX:-192.168.90}"
	IFACE_IP="${IFACE_IP:-${STATIC_IP_PREFIX}.1}"
	SUBNET_IP="${SUBNET_IP:-${STATIC_IP_PREFIX}.0}"
	SUBNET_MASK="${SUBNET_MASK:-255.255.255.0}"
	DHCP_RANGE_START="${DHCP_RANGE_START:-10}"
	DHCP_RANGE_END="${DHCP_RANGE_END:-50}"

	# Default required hostapd configuration
	HOSTAPD_ctrl_interface="${HOSTAPD_ctrl_interface:-/var/run/hostapd}"
	HOSTAPD_ctrl_interface_group="${HOSTAPD_ctrl_interface_group:-0}"
	HOSTAPD_hw_mode="${HOSTAPD_hw_mode:-g}"
	HOSTAPD_channel="${HOSTAPD_channel:-6}"
	HOSTAPD_macaddr_acl="${HOSTAPD_macaddr_acl:-0}"
	HOSTAPD_auth_algs="${HOSTAPD_auth_algs:-1}"
	HOSTAPD_ignore_broadcast_ssid="${HOSTAPD_ignore_broadcast_ssid:-0}"
	HOSTAPD_wpa="${HOSTAPD_wpa:-2}"
	HOSTAPD_wpa_pairwise="${HOSTAPD_wpa_pairwise:-TKIP}"
	HOSTAPD_rsn_pairwise="${HOSTAPD_rsn_pairwise:-CCMP}"
	HOSTAPD_country_code="${HOSTAPD_country_code:-$(wifi_country)}"
}

produce_ssid() {
	local SSID;
	if [ -f "/proc/cpuinfo" ]; then
		SSID=$(grep "Serial" /proc/cpuinfo | awk '{print $3}')
	fi
	SSID="${SSID:-1234}"
	SSID=$(echo "${SSID: -4}" | tr '[:lower:]' '[:upper:]')
	echo "$(hostname)-${SSID}"
}

produce_password() {
	local PASSPHRASE;
	PASSPHRASE="$(< /dev/urandom tr -dc a-km-z0-9 | head -c8)"
	echo "AP_PASSWORD=${PASSPHRASE}" >> "${AP_MODE_CONFIG_FILE}"
	echo "${PASSPHRASE}"
}

usage_and_exit() {
	echo "Application that sets up a Raspberry Pi as a wireless access point."
	echo "Customize the access point settings by editing ${AP_MODE_CONFIG_FILE}"
	echo ""
	echo -e "Usage:\\n\\t${0} {start,stop,status}"
	echo "where:"
	echo -e "\\tstart\\t: use Raspberry Pi as wireless access point."
	echo -e "\\tstop\\t: stop access point mode and restore previous configuration."
	echo -e "\\tstatus\\t: display access point state and information."
	echo -e "\\twait_interface\\t: wait until access point interface is ready."
	echo ""
	exit 1
}

if [[ "$EUID" -ne 0 ]]; then
	echo "Please run as root"
	exit 1
fi

command=${1:-}
valid_commands=("configure" "start" "stop" "status" "enable" "disable" "wait_interface")
if [[ -z "${command}" ]] || [[ ! "${valid_commands[*]}" =~ ${command} ]]; then
	# shellcheck disable=SC2145
	echo "Invalid argument: accepted values are: ${valid_commands[@]}."
	echo ""
	usage_and_exit
fi

# shellcheck disable=SC1090
[[ -f "${AP_MODE_CONFIG_FILE}" ]] && source "${AP_MODE_CONFIG_FILE}"

initialise_ap_values

main() {
	if [[ "${command}" == "configure" ]]; then
		do_configure
		exit
	elif [[ "${command}" == "start" ]]; then
		do_start
	elif [[ "${command}" == "stop" ]]; then
		do_stop
	elif [[ "${command}" == "enable" ]]; then
		do_enable
	elif [[ "${command}" == "disable" ]]; then
		do_disable
	elif [[ "${command}" == "wait_interface" ]]; then
		do_wait_interface
		exit
	else
		:
	fi
	print_current_status
}

do_configure() {
	initialise_ap_ssid_and_password
	_patch_config_files
	_enable_wireless_network_passthrough
}

do_enable() {
	_enable_wireless_card_if_necessary
	_create_virtual_interface_udev_rule
	_add_pre_conditions_on_isc_dhcp_server_start
	_reload_systemd_daemon
	_unmask_service_if_necessary hostapd
}

do_disable() {
	# To support upgrading from old versions
	systemctl disable hostapd &>/dev/null

	_clean_config_files
	_disable_wireless_network_passthrough
	_remove_configure_on_isc_dhcp_server_start
	_remove_virtual_interface_udev_rule
}

do_start() {
	_enable_wireless_card_if_necessary
	_stop_ap_mode_if_active
	_create_virtual_interface
	_wait_for_virtual_interface
	do_configure
	_add_pre_conditions_on_isc_dhcp_server_start
	_reload_systemd_daemon
	_start_ap_mode
	_restart_networking_services
	_wait_for_virtual_interface_ip_addr
}

do_stop() {
	_stop_ap_mode_if_active
	_clean_config_files
	_disable_wireless_network_passthrough
	_remove_configure_on_isc_dhcp_server_start
	_reload_systemd_daemon
	_remove_virtual_interface
	_start_wifi_managed_mode
}

do_wait_interface() {
	_wait_for_virtual_interface
	_wait_for_virtual_interface_ip_addr
}


print_current_status() {
	hostapd_state=$(systemctl show -p ActiveState --value hostapd)
	if [[ "${hostapd_state}" != "active" ]]; then
		state="inactive"
		echo "State: ${state}"
		return
	fi

	state="pending"

	if ! hostapd_cli get_config &>/dev/null; then
		echo "State: ${state}"
		return
	fi

	config="$(hostapd_cli get_config 2>/dev/null)"

	iface="$(echo "${config}" | head -n1 | awk '{print $NF}' | tr -d "'")"
	ip_addr="$(ip -f inet addr show "${iface}" | sed -En -e 's/.*inet ([0-9.]+).*/\1/p')"

	if [[ -z "${ip_addr:-}" ]]; then
		echo "State: ${state}"
		return
	fi

	echo "State: active"

	ssid="$(echo "${config}" | grep "^ssid=" | cut -d'=' -f2)"
	echo -e "Access Point Network SSID:\\t${ssid}"
	echo -e "Access Point Wi-Fi Password:\\t${AP_PASSWORD}"
	echo -e "Access Point IP Address:\\t${ip_addr}"
}

###########################################
# ISC-DHCP-SERVER SERVICE FILE MANAGEMENT #
###########################################
_add_pre_conditions_on_isc_dhcp_server_start() {
	mkdir -p /lib/systemd/system/isc-dhcp-server.service.d
	cat <<EOF >/lib/systemd/system/isc-dhcp-server.service.d/10-wifi-ap-sta.conf
[Service]
ExecStartPre=/usr/bin/wifi-ap-sta configure
ExecStartPre=/usr/bin/wifi-ap-sta wait_interface
ExecStartPost=systemctl restart hostapd.service
Restart=on-failure
EOF
}

_remove_configure_on_isc_dhcp_server_start() {
	ISC_DHCP_SERVER_DROP_IN="/lib/systemd/system/isc-dhcp-server.service.d/10-wifi-ap-sta.conf"
	if [[ -f "${ISC_DHCP_SERVER_DROP_IN}" ]]; then
		echo "Removing drop-in unit '${ISC_DHCP_SERVER_DROP_IN}'..."
		rm "${ISC_DHCP_SERVER_DROP_IN}"
	fi
}

_reload_systemd_daemon() {
	systemctl daemon-reload
}

##########################
# CONFIG FILE MANAGEMENT #
##########################
package_name="wifi-ap-sta"

_delete_config_file_modifications() {
	local id="${1}"
	local file="${2}"

	[ ! -f "${file}" ] && return

	local start_line_regex="^# \[${id}\] START$"
	local end_line_regex="^# \[${id}\] END$"
	sed -i "/${start_line_regex}/,/${end_line_regex}/d" "${file}"
}

_configure_file() {
	local file="${1}"
	local description="${2}"
	local file_contents_to_append="${3}"
	local notes="${4:-}"

	# Delete current config lines in file
	# (in case updated in package)
	_delete_config_file_modifications "${package_name}" "${file}"

	# Clean up trailing newlines
	trimmed_file_contents="$(printf "%s" "$(<"${file}")")"
	echo "${trimmed_file_contents}" >"${file}"

	# Append config
	(
		echo -e ""
		echo -e "# [${package_name}] START"
		echo -e "#"
		echo -e "# ${description}"

		if [[ -n "${notes}" ]]; then
			echo -e "#"
			echo -e "# Notes: "
			echo -e "# ${notes/$'\n'/$'\n'# }"
		fi

		echo -e "#"
		echo -e "${file_contents_to_append}"

		echo -e "#"
		echo -e "# [${package_name}] END"
	) >>"${file}"
}

_clean_config_files() {
	hostapd_conf="/etc/hostapd/hostapd.conf"
	if [[ -f "${hostapd_conf}.orig" ]]; then
		echo "Restoring previous hostapd configuration from ${hostapd_conf}.orig"
		mv "${hostapd_conf}.orig" "${hostapd_conf}"
	fi

	if [ -f /etc/dhcpcd.conf ]; then
		echo "Restoring /etc/dhcpcd.conf"
		_delete_config_file_modifications "${package_name}" /etc/dhcpcd.conf
	elif [ -x "$(command -v nmcli)" ]; then
		nmcli connection down "${AP_IFACE}" || true
		nmcli connection delete "${AP_IFACE}" || true
	fi

	echo "Restoring /etc/dhcp/dhcpd.conf"
	_delete_config_file_modifications "${package_name}" /etc/dhcp/dhcpd.conf

	echo "Restoring /etc/default/isc-dhcp-server"
	_delete_config_file_modifications "${package_name}" /etc/default/isc-dhcp-server
}

_patch_config_files() {
	hostapd_conf="/etc/hostapd/hostapd.conf"
	if [[ -f "${hostapd_conf}" ]]; then
		echo "Backing up existing ${hostapd_conf}..."
		mv "${hostapd_conf}" "${hostapd_conf}.orig"
	fi

	echo "Configuring hostapd ..."
	# For each HOSTAPD_ prefixed environment variable, write to file
	for var in "${!HOSTAPD_@}"; do
		echo "${var/HOSTAPD_/}=${!var}" >>"${hostapd_conf}"
	done

	echo -e "interface=${AP_IFACE}\\nssid=${AP_SSID}\\nwpa_passphrase=${AP_PASSWORD}" >>"${hostapd_conf}"

	dhcpcd_conf="/etc/dhcpcd.conf"
	if [ -f "${dhcpcd_conf}" ]; then
		echo "Setting static IP configuration in ${dhcpcd_conf} ..."
		_configure_file \
		"${dhcpcd_conf}" \
		"Static IP configuration for wireless access point interface" \
		"interface ${AP_IFACE}
	static ip_address=${IFACE_IP}/24
	nohook wpa_supplicant"
	elif [ -x "$(command -v nmcli)" ]; then
		nmcli c mod "${AP_IFACE}" ipv4.addresses "${IFACE_IP}"/24 ipv4.method manual ifname "${AP_IFACE}"
		nmcli connection down "${AP_IFACE}" || true
		nmcli connection up "${AP_IFACE}"
		# disable wpa_supplicant for connection ?
		nmcli c mod "${AP_IFACE}" connection.autoconnect no
	fi

	dhcpd_conf="/etc/dhcp/dhcpd.conf"
	echo "Setting subnet configuration in ${dhcpd_conf} ..."
	_configure_file \
		"${dhcpd_conf}" \
		"Configuration for wireless access point network" \
		"subnet ${SUBNET_IP} netmask ${SUBNET_MASK} {
	range ${STATIC_IP_PREFIX}.${DHCP_RANGE_START} ${STATIC_IP_PREFIX}.${DHCP_RANGE_END};
	option subnet-mask ${SUBNET_MASK};
	option routers ${IFACE_IP};
	option domain-name-servers 8.8.8.8, 8.8.4.4;
	option time-offset 0;
	option broadcast-address ${STATIC_IP_PREFIX}.255;
  }"

	echo "Configuring ${AP_IFACE} in /etc/default/isc-dhcp-server ..."
	_configure_file \
		/etc/default/isc-dhcp-server \
		"Set DHCP server to serve IP addresses on Wireless Access Point interface" \
		"WLAN_AP0_IS_ACTIVE=\$(ifconfig -a ${AP_IFACE} 2>/dev/null)
if [ -z \"\${WLAN_AP0_IS_ACTIVE}\" ]; then
	# If interface is inactive, remove it from INTERFACESv4
	INTERFACESv4=\$(echo \"\${INTERFACESv4}\" | sed -E 's/${AP_IFACE}//g')
elif \$(echo \"\${INTERFACESv4}\" | grep -Evq \"^${AP_IFACE}| ${AP_IFACE} | ${AP_IFACE}$\"); then
	# Add it to INTERFACESv4 if not there already
	INTERFACESv4=\"\${INTERFACESv4} ${AP_IFACE}\"
fi"
}

_enable_wireless_network_passthrough() {
	echo 1 > /proc/sys/net/ipv4/ip_forward
	iptables -t nat -A POSTROUTING -o "${WIFI_IFACE}" -j MASQUERADE
	iptables -t nat -A POSTROUTING -o "${ETH_IFACE}" -j MASQUERADE
}

_disable_wireless_network_passthrough() {
	echo 0 > /proc/sys/net/ipv4/ip_forward
	# We want these commands to succeed even if the rule doesn't exist.
	# This could happen when running the command after upgrading the package.
	iptables -t nat -D POSTROUTING -o "${WIFI_IFACE}" -j MASQUERADE || true
	iptables -t nat -D POSTROUTING -o "${ETH_IFACE}" -j MASQUERADE || true
}

############################
# STATE REFRESH MANAGEMENT #
############################
_service_has_state() {
	local service_name="${1}"
	local service_state="${2:-running}"
	if [ "$(systemctl show -p ActiveState --value "${service_name}")" != "active" ] || [ "$(systemctl show -p SubState --value "${service_name}")" != "${service_state}" ]; then
		return 1
	else
		return 0
	fi
}

_wait_for_service_state() {
	service_name="${1}"
	service_state="${2}"
	echo "Waiting for service '${service_name}' state to be '${service_state}'..."
	while ! _service_has_state "${service_name}" "${service_state}"; do
		sleep 1
	done
	echo "Service '${service_name}' state is now '${service_state}'"
}

_restart_and_wait_for_service_state() {
	local service_name="${1}"
	local service_state="${2:-running}"
	echo "Restarting service ${service_name}..."
	systemctl restart "${service_name}"
	if ! _service_has_state "${service_name}" "${service_state}"; then
		_wait_for_service_state "${service_name}" "${service_state}"
	fi
}

_restart_networking_services() {
	if [ -f /etc/dhcpcd.conf ]; then
		_restart_and_wait_for_service_state dhcpcd running
	fi
	_restart_and_wait_for_service_state wpa_supplicant running
}

#################################
# PHYSICAL INTERFACE MANAGEMENT #
#################################
_enable_wireless_card_if_necessary() {
	wifi_state=$(rfkill list wifi -o Soft -n)
	if [[ "${wifi_state}" == "blocked" ]]; then
		echo "Wireless card is disabled - enabling ..."
		rfkill unblock wifi
	fi
}

################################
# VIRTUAL INTERFACE MANAGEMENT #
################################
UDEV_RULES_FILE="/etc/udev/rules.d/70-persistent-net.rules"

_reload_udev_rules() {
	udevadm control --reload-rules
	udevadm trigger
}

_create_virtual_interface_udev_rule() {
	cat >"${UDEV_RULES_FILE}" <<EOF
SUBSYSTEM=="ieee80211", ACTION=="add|change", KERNEL=="phy0", \
RUN+="/sbin/iw phy phy0 interface add ${AP_IFACE} type __ap", \
RUN+="/bin/ip link set ${AP_IFACE} address ${AP_MAC}"
EOF
}

_create_virtual_interface() {
	echo "Creating virtual interface '${AP_IFACE}'..."
	_create_virtual_interface_udev_rule
	_reload_udev_rules
}

_wait_for_virtual_interface() {
	if ! ip a l "${AP_IFACE}" &>/dev/null; then
		echo "Interface '${AP_IFACE}' isn't ready - waiting..."
		while ! ip a l "${AP_IFACE}" &>/dev/null; do
			sleep 1
		done
	fi
}

_wait_for_virtual_interface_ip_addr() {
	if [[ -z "$(ip -f inet addr show "${AP_IFACE}" | sed -En -e 's/.*inet ([0-9.]+).*/\1/p')" ]]; then
		SLEEP_COUNTER=0
		echo "Interface '${AP_IFACE}' does not yet have an IP address - waiting..."
		while [[ -z "$(ip -f inet addr show "${AP_IFACE}" | sed -En -e 's/.*inet ([0-9.]+).*/\1/p')" ]]; do
			sleep 1
			if [ $SLEEP_COUNTER -eq 5 ]; then
				echo "Trying to reconfigure interface ${AP_IFACE} after waiting for ${SLEEP_COUNTER} seconds"
				_set_ap_interface_static_ip
				_restart_and_wait_for_service_state hostapd running || true
			elif [ $SLEEP_COUNTER -eq 10 ]; then
				echo "Timeout waiting for ${AP_IFACE} to get an IP address after ${SLEEP_COUNTER}, exiting..."
				exit 1
			fi
			SLEEP_COUNTER=$[$SLEEP_COUNTER +1]
		done
	fi
}

_remove_virtual_interface_udev_rule() {
	if [[ -f "${UDEV_RULES_FILE}" ]]; then
		echo "Removing virtual interface '${AP_IFACE}'..."
		rm "${UDEV_RULES_FILE}"
	fi
}

_remove_virtual_interface() {
	_remove_virtual_interface_udev_rule
	_reload_udev_rules
	if iw dev | grep -q "${AP_IFACE}"; then
		iw dev "${AP_IFACE}" del
	fi
}

########################
# WIFI MODE MANAGEMENT #
########################
_unmask_service_if_necessary() {
	if [ "$(systemctl show -p LoadState --value "${1}")" == "masked" ]; then
		systemctl unmask "${1}"
	fi
}

_set_ap_interface_static_ip() {
	ifconfig "${AP_IFACE}" "${IFACE_IP}" netmask "${SUBNET_MASK}"
	ifconfig "${AP_IFACE}" up
}

_start_ap_mode() {
	echo "Starting Wifi: Access Point Mode ..."

	_unmask_service_if_necessary hostapd
	_set_ap_interface_static_ip

	if systemctl status pt-dhcp-server &>/dev/null; then
		_restart_and_wait_for_service_state pt-dhcp-server exited
	else
		_restart_and_wait_for_service_state isc-dhcp-server running
		_wait_for_service_state hostapd running
	fi
	wpa_cli -i "${WIFI_IFACE}" reconfigure &>/dev/null
	echo "Started AP mode with SSID ${AP_SSID}"
}

_stop_ap_mode_if_active() {
	if systemctl status hostapd &>/dev/null; then
		echo "Stopping Wifi: Access Point Mode ..."
		systemctl stop hostapd

		# To support upgrading from old versions
		systemctl disable hostapd &>/dev/null

		echo "Stopped AP mode"
	fi
	wpa_cli -i "${WIFI_IFACE}" reconfigure &>/dev/null
}

_start_wifi_managed_mode() {
	echo "Starting Wifi: Managed Mode ..."
	dhclient -r "${WIFI_IFACE}"
	if systemctl status pt-dhcp-server &>/dev/null; then
		_restart_and_wait_for_service_state pt-dhcp-server exited
	else
		_restart_and_wait_for_service_state isc-dhcp-server running
	fi
	if [ -f /etc/dhcpcd.conf ]; then
		_restart_and_wait_for_service_state dhcpcd running
	fi
	_restart_and_wait_for_service_state wpa_supplicant running
}

main
